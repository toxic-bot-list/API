var Application = require ('express') (),
    db = {};
Application.get ('/api/bots/', async (Req, Res) => {
  var ID = Req['query']['id'];
  if (!ID) return Res.sendStatus (403);
  else return Res.send (await Get(ID));
}).listen (process.env.PORT);
async function Get (ID = '') {
  var $ = require ('cheerio').load (await require ('request-promise') ({
    uri: 'https://www.toxic-bot-list.ml/view/' + ID
  })),
      Data = {};
  $ ('h3').each ((index, element) => {
    if (element.children [0].data.includes ('\n')) return undefined;
    else Data['username'] = element.children [0].data;
  });
  Data['id'] = ID;
  Data['Votes'] = $ ('button:contains("vote")').text ().split ('vote : ')[1];
  Data['shortdesc'] = $ ('h6').first ().text ().split ('\n          ')[1].split ('\n             \n          \n                ')[0];
  Data['owner'] = {
    id: $ ($ ('a[href]').get ()[10]).attr ('href').split ('/profile/')[1],
    name: $ ('button').eq (3).text ()
  };
  Data['prefix'] = $ ('button').eq (5).text ();
  Data['avatar'] = $ ('img').eq (0).attr ('src');
  Data['lib'] = $ ('button').eq (6).text ();
  Data['VoteLink'] = `https://www.toxic-bot-list.ml/bot/${ID}/vote`;
  Data['Invite'] = $ ($ ('a[href]').get ()[11]).attr ('href');
  Data['longdesc'] = $ ('div').eq (3).text ();
  if ($ ('div').eq (2).text ().includes ('The bot is not currently approved')) Data['longdesc'] = Data['longdesc'].split ('\n  \n  \n\n      \n    \n\n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n\n    \n')[1];
  else Data['longdesc'] = Data['longdesc'].split ('\n  \n  \n\n      \n    \n\n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n     \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n    \n \n    \n\n  \n\n    \n')[1];
  Data['longdesc'] = Data['longdesc'].split ('\n    \n      \n    \n  \n\n\n')[0];
  return Data;
}